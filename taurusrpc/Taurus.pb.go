// Code generated by protoc-gen-go. DO NOT EDIT.
// source: Taurus.proto

/*
Package taurusrpc is a generated protocol buffer package.

It is generated from these files:
	Taurus.proto

It has these top-level messages:
	SearchXIDInfo
	ChecksumLists
	FPIndices
	DeviceInfo
	SearchXIDRes
*/
package taurusrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message for API SearchXID
// As FPIndices & DeviceInfo maybe change, so give the two independent role
type SearchXIDInfo struct {
	Zid       string         `protobuf:"bytes,1,opt,name=zid" json:"zid,omitempty"`
	Checksums *ChecksumLists `protobuf:"bytes,2,opt,name=checksums" json:"checksums,omitempty"`
	Fp        *FPIndices     `protobuf:"bytes,3,opt,name=fp" json:"fp,omitempty"`
	Device    *DeviceInfo    `protobuf:"bytes,4,opt,name=device" json:"device,omitempty"`
	Timestamp string         `protobuf:"bytes,5,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *SearchXIDInfo) Reset()                    { *m = SearchXIDInfo{} }
func (m *SearchXIDInfo) String() string            { return proto.CompactTextString(m) }
func (*SearchXIDInfo) ProtoMessage()               {}
func (*SearchXIDInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SearchXIDInfo) GetZid() string {
	if m != nil {
		return m.Zid
	}
	return ""
}

func (m *SearchXIDInfo) GetChecksums() *ChecksumLists {
	if m != nil {
		return m.Checksums
	}
	return nil
}

func (m *SearchXIDInfo) GetFp() *FPIndices {
	if m != nil {
		return m.Fp
	}
	return nil
}

func (m *SearchXIDInfo) GetDevice() *DeviceInfo {
	if m != nil {
		return m.Device
	}
	return nil
}

func (m *SearchXIDInfo) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

// Checksums
type ChecksumLists struct {
	PreferenceChecksum string `protobuf:"bytes,1,opt,name=preference_checksum,json=preferenceChecksum" json:"preference_checksum,omitempty"`
	SettingChecksum    string `protobuf:"bytes,2,opt,name=setting_checksum,json=settingChecksum" json:"setting_checksum,omitempty"`
	SdcardChecksum     string `protobuf:"bytes,3,opt,name=sdcard_checksum,json=sdcardChecksum" json:"sdcard_checksum,omitempty"`
}

func (m *ChecksumLists) Reset()                    { *m = ChecksumLists{} }
func (m *ChecksumLists) String() string            { return proto.CompactTextString(m) }
func (*ChecksumLists) ProtoMessage()               {}
func (*ChecksumLists) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ChecksumLists) GetPreferenceChecksum() string {
	if m != nil {
		return m.PreferenceChecksum
	}
	return ""
}

func (m *ChecksumLists) GetSettingChecksum() string {
	if m != nil {
		return m.SettingChecksum
	}
	return ""
}

func (m *ChecksumLists) GetSdcardChecksum() string {
	if m != nil {
		return m.SdcardChecksum
	}
	return ""
}

// FPIndices Fields
type FPIndices struct {
	SysMac       string `protobuf:"bytes,1,opt,name=sys_mac,json=sysMac" json:"sys_mac,omitempty"`
	SysImei      string `protobuf:"bytes,2,opt,name=sys_imei,json=sysImei" json:"sys_imei,omitempty"`
	AndroidId    string `protobuf:"bytes,3,opt,name=android_id,json=androidId" json:"android_id,omitempty"`
	SdcardCid    string `protobuf:"bytes,4,opt,name=sdcard_cid,json=sdcardCid" json:"sdcard_cid,omitempty"`
	SysSerialno  string `protobuf:"bytes,5,opt,name=sys_serialno,json=sysSerialno" json:"sys_serialno,omitempty"`
	NetSim1Imsi  string `protobuf:"bytes,6,opt,name=net_sim1_imsi,json=netSim1Imsi" json:"net_sim1_imsi,omitempty"`
	NetSim1Iccid string `protobuf:"bytes,7,opt,name=net_sim1_iccid,json=netSim1Iccid" json:"net_sim1_iccid,omitempty"`
}

func (m *FPIndices) Reset()                    { *m = FPIndices{} }
func (m *FPIndices) String() string            { return proto.CompactTextString(m) }
func (*FPIndices) ProtoMessage()               {}
func (*FPIndices) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FPIndices) GetSysMac() string {
	if m != nil {
		return m.SysMac
	}
	return ""
}

func (m *FPIndices) GetSysImei() string {
	if m != nil {
		return m.SysImei
	}
	return ""
}

func (m *FPIndices) GetAndroidId() string {
	if m != nil {
		return m.AndroidId
	}
	return ""
}

func (m *FPIndices) GetSdcardCid() string {
	if m != nil {
		return m.SdcardCid
	}
	return ""
}

func (m *FPIndices) GetSysSerialno() string {
	if m != nil {
		return m.SysSerialno
	}
	return ""
}

func (m *FPIndices) GetNetSim1Imsi() string {
	if m != nil {
		return m.NetSim1Imsi
	}
	return ""
}

func (m *FPIndices) GetNetSim1Iccid() string {
	if m != nil {
		return m.NetSim1Iccid
	}
	return ""
}

// DeviceInfo Fields
type DeviceInfo struct {
	SysManufacture    string `protobuf:"bytes,1,opt,name=sys_manufacture,json=sysManufacture" json:"sys_manufacture,omitempty"`
	SysModel          string `protobuf:"bytes,2,opt,name=sys_model,json=sysModel" json:"sys_model,omitempty"`
	SysBrand          string `protobuf:"bytes,3,opt,name=sys_brand,json=sysBrand" json:"sys_brand,omitempty"`
	SysBoard          string `protobuf:"bytes,4,opt,name=sys_board,json=sysBoard" json:"sys_board,omitempty"`
	SysDevice         string `protobuf:"bytes,5,opt,name=sys_device,json=sysDevice" json:"sys_device,omitempty"`
	SysHardware       string `protobuf:"bytes,6,opt,name=sys_hardware,json=sysHardware" json:"sys_hardware,omitempty"`
	SysProduct        string `protobuf:"bytes,7,opt,name=sys_product,json=sysProduct" json:"sys_product,omitempty"`
	DisplayResolution string `protobuf:"bytes,8,opt,name=display_resolution,json=displayResolution" json:"display_resolution,omitempty"`
	DisplaySize       string `protobuf:"bytes,9,opt,name=display_size,json=displaySize" json:"display_size,omitempty"`
	CpuCode           string `protobuf:"bytes,10,opt,name=cpu_code,json=cpuCode" json:"cpu_code,omitempty"`
	CpuKernel         string `protobuf:"bytes,11,opt,name=cpu_kernel,json=cpuKernel" json:"cpu_kernel,omitempty"`
	CpuCoreNumber     string `protobuf:"bytes,12,opt,name=cpu_core_number,json=cpuCoreNumber" json:"cpu_core_number,omitempty"`
}

func (m *DeviceInfo) Reset()                    { *m = DeviceInfo{} }
func (m *DeviceInfo) String() string            { return proto.CompactTextString(m) }
func (*DeviceInfo) ProtoMessage()               {}
func (*DeviceInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DeviceInfo) GetSysManufacture() string {
	if m != nil {
		return m.SysManufacture
	}
	return ""
}

func (m *DeviceInfo) GetSysModel() string {
	if m != nil {
		return m.SysModel
	}
	return ""
}

func (m *DeviceInfo) GetSysBrand() string {
	if m != nil {
		return m.SysBrand
	}
	return ""
}

func (m *DeviceInfo) GetSysBoard() string {
	if m != nil {
		return m.SysBoard
	}
	return ""
}

func (m *DeviceInfo) GetSysDevice() string {
	if m != nil {
		return m.SysDevice
	}
	return ""
}

func (m *DeviceInfo) GetSysHardware() string {
	if m != nil {
		return m.SysHardware
	}
	return ""
}

func (m *DeviceInfo) GetSysProduct() string {
	if m != nil {
		return m.SysProduct
	}
	return ""
}

func (m *DeviceInfo) GetDisplayResolution() string {
	if m != nil {
		return m.DisplayResolution
	}
	return ""
}

func (m *DeviceInfo) GetDisplaySize() string {
	if m != nil {
		return m.DisplaySize
	}
	return ""
}

func (m *DeviceInfo) GetCpuCode() string {
	if m != nil {
		return m.CpuCode
	}
	return ""
}

func (m *DeviceInfo) GetCpuKernel() string {
	if m != nil {
		return m.CpuKernel
	}
	return ""
}

func (m *DeviceInfo) GetCpuCoreNumber() string {
	if m != nil {
		return m.CpuCoreNumber
	}
	return ""
}

// The response message for API SearchXID
type SearchXIDRes struct {
	Xid             string `protobuf:"bytes,1,opt,name=xid" json:"xid,omitempty"`
	StatusCode      int32  `protobuf:"varint,2,opt,name=statusCode" json:"statusCode,omitempty"`
	ChildStatusCode int32  `protobuf:"varint,3,opt,name=childStatusCode" json:"childStatusCode,omitempty"`
	Suspicious      bool   `protobuf:"varint,4,opt,name=suspicious" json:"suspicious,omitempty"`
}

func (m *SearchXIDRes) Reset()                    { *m = SearchXIDRes{} }
func (m *SearchXIDRes) String() string            { return proto.CompactTextString(m) }
func (*SearchXIDRes) ProtoMessage()               {}
func (*SearchXIDRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SearchXIDRes) GetXid() string {
	if m != nil {
		return m.Xid
	}
	return ""
}

func (m *SearchXIDRes) GetStatusCode() int32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *SearchXIDRes) GetChildStatusCode() int32 {
	if m != nil {
		return m.ChildStatusCode
	}
	return 0
}

func (m *SearchXIDRes) GetSuspicious() bool {
	if m != nil {
		return m.Suspicious
	}
	return false
}

func init() {
	proto.RegisterType((*SearchXIDInfo)(nil), "taurusrpc.SearchXIDInfo")
	proto.RegisterType((*ChecksumLists)(nil), "taurusrpc.ChecksumLists")
	proto.RegisterType((*FPIndices)(nil), "taurusrpc.FPIndices")
	proto.RegisterType((*DeviceInfo)(nil), "taurusrpc.DeviceInfo")
	proto.RegisterType((*SearchXIDRes)(nil), "taurusrpc.SearchXIDRes")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Taurus service

type TaurusClient interface {
	// Search corresponding XID
	SearchXID(ctx context.Context, in *SearchXIDInfo, opts ...grpc.CallOption) (*SearchXIDRes, error)
}

type taurusClient struct {
	cc *grpc.ClientConn
}

func NewTaurusClient(cc *grpc.ClientConn) TaurusClient {
	return &taurusClient{cc}
}

func (c *taurusClient) SearchXID(ctx context.Context, in *SearchXIDInfo, opts ...grpc.CallOption) (*SearchXIDRes, error) {
	out := new(SearchXIDRes)
	err := grpc.Invoke(ctx, "/taurusrpc.Taurus/SearchXID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Taurus service

type TaurusServer interface {
	// Search corresponding XID
	SearchXID(context.Context, *SearchXIDInfo) (*SearchXIDRes, error)
}

func RegisterTaurusServer(s *grpc.Server, srv TaurusServer) {
	s.RegisterService(&_Taurus_serviceDesc, srv)
}

func _Taurus_SearchXID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchXIDInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaurusServer).SearchXID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taurusrpc.Taurus/SearchXID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaurusServer).SearchXID(ctx, req.(*SearchXIDInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _Taurus_serviceDesc = grpc.ServiceDesc{
	ServiceName: "taurusrpc.Taurus",
	HandlerType: (*TaurusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchXID",
			Handler:    _Taurus_SearchXID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Taurus.proto",
}

func init() { proto.RegisterFile("Taurus.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 692 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x94, 0xdb, 0x6e, 0x13, 0x3b,
	0x14, 0x86, 0xf7, 0x24, 0xbb, 0x69, 0x67, 0x35, 0x69, 0xba, 0xbd, 0x0f, 0x9d, 0x7d, 0x2e, 0x51,
	0x05, 0xe5, 0xa2, 0x41, 0x2d, 0x12, 0xd7, 0xa8, 0xad, 0x10, 0x01, 0x8a, 0xa2, 0x09, 0x17, 0xdc,
	0x8d, 0x5c, 0x7b, 0xa5, 0xb1, 0x9a, 0x39, 0xc8, 0xcb, 0x53, 0x9a, 0x3e, 0x02, 0xd7, 0xbc, 0x01,
	0xaf, 0xc3, 0x93, 0xf0, 0x14, 0xc8, 0x1e, 0xcf, 0x4c, 0x8a, 0xb8, 0x1b, 0xff, 0xff, 0x67, 0xaf,
	0xf5, 0xdb, 0x1e, 0x43, 0xff, 0x1d, 0x2f, 0x75, 0x49, 0xe3, 0x42, 0xe7, 0x26, 0x67, 0xa1, 0x71,
	0x23, 0x5d, 0x88, 0xd1, 0x97, 0x00, 0x06, 0x33, 0xe4, 0x5a, 0x2c, 0xde, 0x4f, 0xce, 0x27, 0xd9,
	0x3c, 0x67, 0xbb, 0xd0, 0xbd, 0x53, 0x32, 0x0a, 0xf6, 0x83, 0xc3, 0x30, 0xb6, 0x9f, 0xec, 0x19,
	0x84, 0x62, 0x81, 0xe2, 0x9a, 0xca, 0x94, 0xa2, 0xce, 0x7e, 0x70, 0xb8, 0x7d, 0x12, 0x8d, 0x9b,
	0x25, 0xc6, 0x67, 0xde, 0x7b, 0xa3, 0xc8, 0x50, 0xdc, 0xa2, 0xec, 0x00, 0x3a, 0xf3, 0x22, 0xea,
	0xba, 0x09, 0xbf, 0xad, 0x4d, 0x78, 0x31, 0x9d, 0x64, 0x52, 0x09, 0xa4, 0xb8, 0x33, 0x2f, 0xd8,
	0x11, 0xf4, 0x24, 0xde, 0x28, 0x81, 0xd1, 0xcf, 0x8e, 0xfc, 0x7d, 0x8d, 0x3c, 0x77, 0x86, 0x6d,
	0x2b, 0xf6, 0x10, 0xfb, 0x07, 0x42, 0xa3, 0x52, 0x24, 0xc3, 0xd3, 0x22, 0xda, 0x70, 0x4d, 0xb6,
	0xc2, 0xe8, 0x53, 0x00, 0x83, 0x7b, 0xfd, 0xb0, 0x27, 0xf0, 0x6b, 0xa1, 0x71, 0x8e, 0x1a, 0x33,
	0x81, 0x49, 0xdd, 0x9c, 0x8f, 0xc7, 0x5a, 0xab, 0x9e, 0xc5, 0x1e, 0xc3, 0x2e, 0xa1, 0x31, 0x2a,
	0xbb, 0x6a, 0xe9, 0x8e, 0xa3, 0x87, 0x5e, 0x6f, 0xd0, 0x47, 0x30, 0x24, 0x29, 0xb8, 0x96, 0x2d,
	0xd9, 0x75, 0xe4, 0x4e, 0x25, 0xd7, 0xe0, 0xe8, 0x6b, 0x00, 0x61, 0x93, 0x9a, 0xed, 0xc1, 0x26,
	0xad, 0x28, 0x49, 0xb9, 0xf0, 0x6d, 0xf4, 0x68, 0x45, 0x17, 0x5c, 0xb0, 0x3f, 0x61, 0xcb, 0x1a,
	0x2a, 0x45, 0xe5, 0x4b, 0x5a, 0x70, 0x92, 0xa2, 0x62, 0xff, 0x02, 0xf0, 0x4c, 0xea, 0x5c, 0xc9,
	0x44, 0x49, 0x5f, 0x25, 0xf4, 0xca, 0x44, 0x5a, 0xbb, 0xee, 0x44, 0x49, 0xb7, 0x91, 0x61, 0x1c,
	0xfa, 0x26, 0x94, 0x64, 0x0f, 0xa0, 0x6f, 0x17, 0x26, 0xd4, 0x8a, 0x2f, 0xb3, 0xdc, 0xef, 0xdb,
	0x36, 0xad, 0x68, 0xe6, 0x25, 0x36, 0x82, 0x41, 0x86, 0x26, 0x21, 0x95, 0x1e, 0x27, 0x2a, 0x25,
	0x15, 0xf5, 0x2a, 0x26, 0x43, 0x33, 0x53, 0xe9, 0xf1, 0x24, 0x25, 0xc5, 0x0e, 0x60, 0xa7, 0x65,
	0x84, 0xad, 0xb4, 0xe9, 0xa0, 0x7e, 0x0d, 0x59, 0x6d, 0xf4, 0xb9, 0x0b, 0xd0, 0x1e, 0x9c, 0xdb,
	0x24, 0x97, 0x36, 0x2b, 0xe7, 0x5c, 0x98, 0x52, 0xa3, 0x4f, 0xbd, 0xe3, 0x52, 0x37, 0x2a, 0xfb,
	0x1b, 0x42, 0x07, 0xe6, 0x12, 0x97, 0x3e, 0xbe, 0xdd, 0x8e, 0x0b, 0x3b, 0xae, 0xcd, 0x4b, 0xcd,
	0xb3, 0x3a, 0xbe, 0x35, 0x4f, 0xed, 0xb8, 0x31, 0x73, 0xae, 0xeb, 0xf0, 0xce, 0xb4, 0x63, 0xb7,
	0x35, 0x2b, 0x4a, 0xfc, 0x1d, 0xf3, 0x37, 0x86, 0x56, 0x54, 0xb5, 0x58, 0x6f, 0xcd, 0x82, 0x6b,
	0xf9, 0x81, 0x6b, 0xac, 0x63, 0xd3, 0x8a, 0x5e, 0x7a, 0x89, 0xfd, 0x0f, 0x76, 0x98, 0x14, 0x3a,
	0x97, 0xa5, 0x30, 0x3e, 0xb3, 0x5d, 0x74, 0x5a, 0x29, 0xec, 0x08, 0x98, 0x54, 0x54, 0x2c, 0xf9,
	0x2a, 0xd1, 0x48, 0xf9, 0xb2, 0x34, 0x2a, 0xcf, 0xa2, 0x2d, 0xc7, 0xfd, 0xe2, 0x9d, 0xb8, 0x31,
	0x6c, 0xc9, 0x1a, 0x27, 0x75, 0x87, 0x51, 0x58, 0x95, 0xf4, 0xda, 0x4c, 0xdd, 0xa1, 0xbd, 0x09,
	0xa2, 0x28, 0x13, 0x91, 0x4b, 0x8c, 0xa0, 0xba, 0x09, 0xa2, 0x28, 0xcf, 0x72, 0x89, 0x36, 0x8f,
	0xb5, 0xae, 0x51, 0x67, 0xb8, 0x8c, 0xb6, 0xab, 0x3c, 0xa2, 0x28, 0x5f, 0x3b, 0x81, 0x3d, 0x84,
	0x61, 0x35, 0x53, 0x63, 0x92, 0x95, 0xe9, 0x25, 0xea, 0xa8, 0xef, 0x98, 0x81, 0x5b, 0x40, 0xe3,
	0x5b, 0x27, 0x8e, 0x3e, 0x06, 0xd0, 0x6f, 0x7e, 0xfc, 0x18, 0xc9, 0xfe, 0xf7, 0xb7, 0xed, 0x7f,
	0x7f, 0xab, 0x24, 0xfb, 0x0f, 0x80, 0x0c, 0x37, 0x25, 0xd9, 0xba, 0xee, 0x44, 0x36, 0xe2, 0x35,
	0x85, 0x1d, 0xc2, 0x50, 0x2c, 0xd4, 0x52, 0xce, 0x5a, 0xa8, 0xeb, 0xa0, 0xef, 0x65, 0xb7, 0x52,
	0x49, 0x85, 0x12, 0x2a, 0x2f, 0xc9, 0x9d, 0xd0, 0x56, 0xbc, 0xa6, 0x9c, 0xbc, 0x82, 0x5e, 0xf5,
	0x40, 0xb1, 0xe7, 0x10, 0x36, 0x5d, 0xb1, 0xf5, 0x57, 0xe6, 0xde, 0x23, 0xf5, 0xd7, 0xde, 0x8f,
	0x9c, 0x18, 0x69, 0xf4, 0xd3, 0xe9, 0x18, 0xfe, 0x10, 0x79, 0x3a, 0x4e, 0xf1, 0xea, 0x46, 0xa9,
	0x71, 0x86, 0x64, 0x3c, 0x7b, 0xca, 0xaa, 0x1a, 0x33, 0xd4, 0xf6, 0xe4, 0xa7, 0xf6, 0x29, 0x9c,
	0x06, 0x97, 0x3d, 0xf7, 0x26, 0x3e, 0xfd, 0x16, 0x00, 0x00, 0xff, 0xff, 0xae, 0x8e, 0x17, 0xd6,
	0x23, 0x05, 0x00, 0x00,
}
